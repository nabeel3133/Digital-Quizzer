/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Login;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author Nabeel Hussain Syed
 */
public class StudentAttemptsQuiz extends javax.swing.JFrame {
private static String username;
private static int QuizNumber;
int qNum = 0;
int check = 1;

            String Title;
            String Description;
            int QuestionType;
            String QuestionMarks;
            int QuestionNumber;
            String Question;
            String FirstOption;
            String SecondOption;
            String ThirdOption;
            String FourthOption;
            String CorrectAnswer;
            int TotalMarksOfQuiz = 0;
            int TotalMarksOfStudent = 0;
            String record = null;
            FileReader in = null;
            
            int counter = 0;
            int n;
            String[] options = {"Logout", "Attempt another quiz","Exit program"};
    /**
     * Creates new form StudentAttemptsQuiz
     */
    public StudentAttemptsQuiz(String name, int quizNo) {
        initComponents();
        MCQPanel.setVisible(false);
        username = name;
        QuizNumber = quizNo;
        
        TrueFalsePanel.setVisible(false);
        NumericPanel.setVisible(false);
        ShowQuestion(QuizNumber);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MCQButtonGroup = new javax.swing.ButtonGroup();
        TrueFalseButtonGroup = new javax.swing.ButtonGroup();
        MCQPanel = new java.awt.Panel();
        Label1 = new java.awt.Label();
        OptionA = new javax.swing.JRadioButton();
        OptionB = new javax.swing.JRadioButton();
        OptionC = new javax.swing.JRadioButton();
        OptionD = new javax.swing.JRadioButton();
        MCQNext = new javax.swing.JButton();
        QuestionNumberAndQuestion = new javax.swing.JTextArea();
        MaxMarks = new java.awt.Label();
        TrueFalsePanel = new java.awt.Panel();
        Label2 = new java.awt.Label();
        TrueOption = new javax.swing.JRadioButton();
        FalseOption = new javax.swing.JRadioButton();
        TrueFalseNext = new javax.swing.JButton();
        NumericPanel = new java.awt.Panel();
        NumericAnswer = new javax.swing.JTextField();
        Label3 = new java.awt.Label();
        NumericNext = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Label1.setEnabled(false);
        Label1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Label1.setText("Options:");

        MCQButtonGroup.add(OptionA);
        OptionA.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        MCQButtonGroup.add(OptionB);
        OptionB.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        MCQButtonGroup.add(OptionC);
        OptionC.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        MCQButtonGroup.add(OptionD);
        OptionD.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        MCQNext.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        MCQNext.setText("Next");
        MCQNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MCQNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MCQPanelLayout = new javax.swing.GroupLayout(MCQPanel);
        MCQPanel.setLayout(MCQPanelLayout);
        MCQPanelLayout.setHorizontalGroup(
            MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MCQPanelLayout.createSequentialGroup()
                .addGroup(MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptionA)
                    .addComponent(OptionB)
                    .addComponent(OptionC)
                    .addComponent(OptionD)
                    .addComponent(Label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MCQNext, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        MCQPanelLayout.setVerticalGroup(
            MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(MCQPanelLayout.createSequentialGroup()
                .addGroup(MCQPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MCQPanelLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(OptionA)
                        .addGap(18, 18, 18)
                        .addComponent(OptionB)
                        .addGap(18, 18, 18)
                        .addComponent(OptionC)
                        .addGap(18, 18, 18)
                        .addComponent(OptionD)
                        .addGap(18, 18, 18))
                    .addGroup(MCQPanelLayout.createSequentialGroup()
                        .addComponent(Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(MCQNext, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        QuestionNumberAndQuestion.setEditable(false);
        QuestionNumberAndQuestion.setColumns(20);
        QuestionNumberAndQuestion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        QuestionNumberAndQuestion.setRows(5);
        QuestionNumberAndQuestion.setText("Question");

        MaxMarks.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        Label2.setEnabled(false);
        Label2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Label2.setText("Options:");

        TrueFalseButtonGroup.add(TrueOption);
        TrueOption.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        TrueOption.setText("True");

        TrueFalseButtonGroup.add(FalseOption);
        FalseOption.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        FalseOption.setText("False");

        TrueFalseNext.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        TrueFalseNext.setText("Next");
        TrueFalseNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrueFalseNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TrueFalsePanelLayout = new javax.swing.GroupLayout(TrueFalsePanel);
        TrueFalsePanel.setLayout(TrueFalsePanelLayout);
        TrueFalsePanelLayout.setHorizontalGroup(
            TrueFalsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TrueFalsePanelLayout.createSequentialGroup()
                .addGroup(TrueFalsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TrueOption)
                    .addComponent(FalseOption)
                    .addComponent(Label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 73, Short.MAX_VALUE))
            .addComponent(TrueFalseNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TrueFalsePanelLayout.setVerticalGroup(
            TrueFalsePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TrueFalsePanelLayout.createSequentialGroup()
                .addComponent(Label2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TrueOption)
                .addGap(18, 18, 18)
                .addComponent(FalseOption)
                .addGap(18, 18, 18)
                .addComponent(TrueFalseNext, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        NumericAnswer.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N

        Label3.setEnabled(false);
        Label3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        Label3.setText("Answer: ");

        NumericNext.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        NumericNext.setText("Next");
        NumericNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumericNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NumericPanelLayout = new javax.swing.GroupLayout(NumericPanel);
        NumericPanel.setLayout(NumericPanelLayout);
        NumericPanelLayout.setHorizontalGroup(
            NumericPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NumericPanelLayout.createSequentialGroup()
                .addGroup(NumericPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NumericAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 42, Short.MAX_VALUE))
            .addComponent(NumericNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        NumericPanelLayout.setVerticalGroup(
            NumericPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NumericPanelLayout.createSequentialGroup()
                .addComponent(Label3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NumericAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(NumericNext, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MCQPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TrueFalsePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(NumericPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(QuestionNumberAndQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(MaxMarks, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(290, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(QuestionNumberAndQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MaxMarks, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MCQPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TrueFalsePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NumericPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MCQNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MCQNextActionPerformed

        if(!OptionA.isSelected() && !OptionB.isSelected() && !OptionC.isSelected() && !OptionD.isSelected())
        {
        JOptionPane.showMessageDialog(null,"Please select an option!","Answer not provided",JOptionPane.ERROR_MESSAGE);            
        }
        else if(OptionA.isSelected() || OptionB.isSelected() || OptionC.isSelected() || OptionD.isSelected())
        {
             if( (OptionA.isSelected() && FirstOption.equals(CorrectAnswer)) || (OptionB.isSelected() && SecondOption.equals(CorrectAnswer)) || (OptionC.isSelected() && ThirdOption.equals(CorrectAnswer)) || (OptionD.isSelected() && FourthOption.equals(CorrectAnswer)) )
             {
                 TotalMarksOfStudent = TotalMarksOfStudent + Integer.parseInt(QuestionMarks);
                 if(MCQNext.getText().equals("Finish"))
                 {
        JOptionPane.showMessageDialog(null,"Correct!\nQuiz is completed.\nYou have scored "+TotalMarksOfStudent+" out of "+TotalMarksOfQuiz,"Quiz Completed!",JOptionPane.INFORMATION_MESSAGE); 
                 n = JOptionPane.showOptionDialog(null,"Do you want to logout or attempt another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                 if(options[n].contains("Logout"))
                    {
                    this.dispose();                            
                    Login newUser = new Login();
                    newUser.setVisible(true);
                    }
                    else if(options[n].contains("Exit program"))
                    {
                    System.exit(0);        
                    }
                    else if(options[n].contains("Attempt another quiz"))
                    {
                    this.dispose();
                    StudentMenu AnotherQuiz = new StudentMenu(username);
                    AnotherQuiz.setVisible(true);
                    }  
                }                               
                else
                {
        JOptionPane.showMessageDialog(null,"Correct!\nMoving on to the next question","Correct answer",JOptionPane.INFORMATION_MESSAGE);                                 
         MCQButtonGroup.clearSelection();                 
         counter++;
         ShowQuestion(QuizNumber);
                }
             }
              else 
              {
                 TotalMarksOfStudent = TotalMarksOfStudent + 0;
                 if(MCQNext.getText().equals("Finish"))
                 {
        JOptionPane.showMessageDialog(null,"Wrong!\nQuiz is completed.\nYou have scored "+TotalMarksOfStudent+" out of "+TotalMarksOfQuiz,"Quiz Completed!",JOptionPane.ERROR_MESSAGE); 
                 n = JOptionPane.showOptionDialog(null,"Do you want to logout or attempt another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);        
                if(options[n].contains("Logout"))
                 {
                 this.dispose();                            
                 Login newUser = new Login();
                 newUser.setVisible(true);
                 }
                 else if(options[n].contains("Exit program"))
                  {
                  System.exit(0);        
                  }
                  else if(options[n].contains("Attempt another quiz"))
                  {
                 this.dispose();
                  StudentMenu AnotherQuiz = new StudentMenu(username);
                  AnotherQuiz.setVisible(true);
                  }                           
                 }
                 else
                 {
        JOptionPane.showMessageDialog(null,"Wrong!\nMoving on to the next question","Wrong answer",JOptionPane.ERROR_MESSAGE);                                                      
        MCQButtonGroup.clearSelection();         
        counter++;
        ShowQuestion(QuizNumber);
                 }
                }
        }             
       
    }//GEN-LAST:event_MCQNextActionPerformed

    private void TrueFalseNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrueFalseNextActionPerformed

        if(!TrueOption.isSelected() && !FalseOption.isSelected())
        {
        JOptionPane.showMessageDialog(null,"Please select an option!","Answer not provided",JOptionPane.ERROR_MESSAGE);            
        }
        else if(TrueOption.isSelected() || FalseOption.isSelected())
        {
             if( (TrueOption.isSelected() && TrueOption.getText().equals(CorrectAnswer)) || (FalseOption.isSelected() && FalseOption.getText().equals(CorrectAnswer)))
             {
                 TotalMarksOfStudent = TotalMarksOfStudent + Integer.parseInt(QuestionMarks);
                 if(TrueFalseNext.getText().equals("Finish"))
                 {
        JOptionPane.showMessageDialog(null,"Correct!\nQuiz is completed.\nYou have scored "+TotalMarksOfStudent+" out of "+TotalMarksOfQuiz,"Quiz Completed!",JOptionPane.INFORMATION_MESSAGE); 
                 n = JOptionPane.showOptionDialog(null,"Do you want to logout or attempt another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                 if(options[n].contains("Logout"))
                    {
                    this.dispose();                            
                    Login newUser = new Login();
                    newUser.setVisible(true);
                    }
                    else if(options[n].contains("Exit program"))
                    {
                    System.exit(0);        
                    }
                    else if(options[n].contains("Attempt another quiz"))
                    {
                    this.dispose();
                    StudentMenu AnotherQuiz = new StudentMenu(username);
                    AnotherQuiz.setVisible(true);
                    }  
                }                               
                else
                {
        JOptionPane.showMessageDialog(null,"Correct!\nMoving on to the next question","Correct answer",JOptionPane.INFORMATION_MESSAGE);                                 
                TrueFalseButtonGroup.clearSelection();
                counter++;                
                ShowQuestion(QuizNumber);
                }
             }
              else 
              {
                 TotalMarksOfStudent = TotalMarksOfStudent + 0;
                 if(TrueFalseNext.getText().equals("Finish"))
                 {
        JOptionPane.showMessageDialog(null,"Wrong!\nQuiz is completed.\nYou have scored "+TotalMarksOfStudent+" out of "+TotalMarksOfQuiz,"Quiz Completed!",JOptionPane.ERROR_MESSAGE); 
                        TrueFalseButtonGroup.clearSelection();         
        n = JOptionPane.showOptionDialog(null,"Do you want to logout or attempt another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);        
                if(options[n].contains("Logout"))
                 {
                 this.dispose();                            
                 Login newUser = new Login();
                 newUser.setVisible(true);
                 }
                 else if(options[n].contains("Exit program"))
                  {
                  System.exit(0);        
                  }
                  else if(options[n].contains("Attempt another quiz"))
                  {
                 this.dispose();
                  StudentMenu AnotherQuiz = new StudentMenu(username);
                  AnotherQuiz.setVisible(true);
                  }                           
                 }
                 else
                 {
                 JOptionPane.showMessageDialog(null,"Wrong!\nMoving on to the next question","Wrong answer",JOptionPane.ERROR_MESSAGE);                                                      
                 TrueFalseButtonGroup.clearSelection();
                 counter++;
                 ShowQuestion(QuizNumber);
                 }
                }
        }             
       
    }//GEN-LAST:event_TrueFalseNextActionPerformed

    private void NumericNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumericNextActionPerformed
        if(NumericAnswer.getText().equals(""))
        {
        JOptionPane.showMessageDialog(null,"Please enter a numeric value before proceeding!","No answer provided",JOptionPane.ERROR_MESSAGE);        
        }
        else if(!NumericAnswer.getText().matches("[0-9]+"))
        {
        JOptionPane.showMessageDialog(null,"Please enter a valid input","Invalid input",JOptionPane.ERROR_MESSAGE);                     
        }
        else
        {
            if(NumericAnswer.getText().equals(CorrectAnswer))
            {
                 TotalMarksOfStudent = TotalMarksOfStudent + Integer.parseInt(QuestionMarks);
                 if(NumericNext.getText().equals("Finish"))
                 {
        JOptionPane.showMessageDialog(null,"Correct!\nQuiz is completed.\nYou have scored "+TotalMarksOfStudent+" out of "+TotalMarksOfQuiz,"Quiz Completed!",JOptionPane.INFORMATION_MESSAGE); 
        NumericAnswer.setText("");
        n = JOptionPane.showOptionDialog(null,"Do you want to logout or attempt another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                 if(options[n].contains("Logout"))
                    {
                    this.dispose();                            
                    Login newUser = new Login();
                    newUser.setVisible(true);
                    }
                    else if(options[n].contains("Exit program"))
                    {
                    System.exit(0);        
                    }
                    else if(options[n].contains("Attempt another quiz"))
                    {
                    this.dispose();
                    StudentMenu AnotherQuiz = new StudentMenu(username);
                    AnotherQuiz.setVisible(true);
                    }   
                 }
                 else
                 {
                 JOptionPane.showMessageDialog(null,"Correct!\nMoving on to the next question","Correct answer",JOptionPane.INFORMATION_MESSAGE);                                                      
                 counter++;
                 NumericAnswer.setText("");
                 ShowQuestion(QuizNumber);     
                 }
            }
            else
            {
                 TotalMarksOfStudent = TotalMarksOfStudent + 0;
                 if(NumericNext.getText().equals("Finish"))
                 {
        JOptionPane.showMessageDialog(null,"Wrong!\nQuiz is completed.\nYou have scored "+TotalMarksOfStudent+" out of "+TotalMarksOfQuiz,"Quiz Completed!",JOptionPane.ERROR_MESSAGE); 
                 n = JOptionPane.showOptionDialog(null,"Do you want to logout or attempt another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                 if(options[n].contains("Logout"))
                    {
                    this.dispose();                            
                    Login newUser = new Login();
                    newUser.setVisible(true);
                    }
                    else if(options[n].contains("Exit program"))
                    {
                    System.exit(0);        
                    }
                    else if(options[n].contains("Attempt another quiz"))
                    {
                    this.dispose();
                    StudentMenu AnotherQuiz = new StudentMenu(username);
                    AnotherQuiz.setVisible(true);
                    }   
                 }
                 else
                 {
                 JOptionPane.showMessageDialog(null,"Wrong!\nMoving on to the next question","Wrong answer",JOptionPane.ERROR_MESSAGE);                                                      
                 NumericAnswer.setText("");
                 counter++;
                 ShowQuestion(QuizNumber);
                 }
            }
        }
    }//GEN-LAST:event_NumericNextActionPerformed

    void ShowQuestion(int QuizNumber)
    {
	try {
        in = new FileReader("Quizzes.txt");
        BufferedReader br = new BufferedReader(in);
	while ((record = br.readLine()) !=null) 
	{
            String[] parts = record.split("--------");
            QuestionNumber = Integer.parseInt(parts[4]);
            if(QuestionNumber == 1)
            {
                qNum++;
            }
            if(qNum == QuizNumber)
            {
                qNum = 0;            
            for(int i=0; i<counter; i++)
            {                
                record = br.readLine();
            }
            parts = record.split("--------");              
            QuestionNumber = Integer.parseInt(parts[4]);                            
            Title = parts[0]; 
            Description = parts[1];
            QuestionType = Integer.parseInt(parts[2]);
            QuestionMarks = parts[3];
            Question = parts[5];
            QuestionNumberAndQuestion.setText("Question No "+QuestionNumber+ ": "+Question);
            MaxMarks.setText("Marks: "+QuestionMarks);                                                    
            
            if(QuestionType == 1)
            {   
                FirstOption = parts[6];
                SecondOption = parts[7];
                ThirdOption = parts[8];
                FourthOption = parts[9];
                CorrectAnswer = parts[10];
                MCQPanel.setVisible(true);
                TrueFalsePanel.setVisible(false);
                NumericPanel.setVisible(false);
                OptionA.setText(FirstOption);
                OptionB.setText(SecondOption);
                OptionC.setText(ThirdOption);
                OptionD.setText(FourthOption);                
                if (parts.length == 12)
                {
                TotalMarksOfQuiz = Integer.parseInt(parts[11]);   
		MCQNext.setText("Finish");
                }
                break;
            }
            else if(QuestionType == 2)
            {
                CorrectAnswer = parts[8];
                TrueFalsePanel.setVisible(true);
                MCQPanel.setVisible(false);
                NumericPanel.setVisible(false);
                if (parts.length == 10)
                {
                TotalMarksOfQuiz = Integer.parseInt(parts[9]);                       
                TrueFalseNext.setText("Finish");
                }
                break;
            }
            else if(QuestionType == 3)
            {
                CorrectAnswer = parts[6];
                NumericPanel.setVisible(true);
                MCQPanel.setVisible(false);
                TrueFalsePanel.setVisible(false);
                if (parts.length == 8)
                {
                TotalMarksOfQuiz = Integer.parseInt(parts[7]);                                           
                NumericNext.setText("Finish");
                }
                break;
            }
        }
            else
            {
              check++;  
              continue;
            }
        }
        }      
        catch (IOException e) {
	e.getCause();
	}  
         
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentAttemptsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentAttemptsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentAttemptsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentAttemptsQuiz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentAttemptsQuiz(username, QuizNumber).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton FalseOption;
    private java.awt.Label Label1;
    private java.awt.Label Label2;
    private java.awt.Label Label3;
    private javax.swing.ButtonGroup MCQButtonGroup;
    private javax.swing.JButton MCQNext;
    private java.awt.Panel MCQPanel;
    private java.awt.Label MaxMarks;
    private javax.swing.JTextField NumericAnswer;
    private javax.swing.JButton NumericNext;
    private java.awt.Panel NumericPanel;
    private javax.swing.JRadioButton OptionA;
    private javax.swing.JRadioButton OptionB;
    private javax.swing.JRadioButton OptionC;
    private javax.swing.JRadioButton OptionD;
    private javax.swing.JTextArea QuestionNumberAndQuestion;
    private javax.swing.ButtonGroup TrueFalseButtonGroup;
    private javax.swing.JButton TrueFalseNext;
    private java.awt.Panel TrueFalsePanel;
    private javax.swing.JRadioButton TrueOption;
    // End of variables declaration//GEN-END:variables
}
