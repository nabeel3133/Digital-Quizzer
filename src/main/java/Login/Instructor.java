/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Login;
import static java.time.Clock.system;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import java.io.*;
import java.io.FileOutputStream;

/**
 *
 * @author Nabeel Hussain Syed
 */
public class Instructor extends javax.swing.JFrame{
   private int QuestionType;  //1 for MCQ, 2 for TrueFalse, 3 for Numeric
   private int QuestionNumber;
   private int TotalScore;
   private int MaximumScore;
   private static String Title;
   private static String Description;
   List<String> Quests;
   List<String> CorrectAnswers;
   List<String> MCQOptions;
   List<String> QuestMarks;

   
   /**
     * Creates new form Instructor
     */
    public Instructor(String title, String description) {
        Title = title;
        Description = description;
        initComponents();
        jPanel1.setVisible(false);
        jPanel2.setVisible(false);
        jPanel3.setVisible(false);
        Quests = new ArrayList<String>();
        CorrectAnswers = new ArrayList<String>();
        MCQOptions = new ArrayList<String>();
        QuestMarks = new ArrayList<String>();
        MakeQuiz();
    }
    
    public Instructor()
    {
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        QuestionNo = new javax.swing.JLabel();
        MultipleChoice = new javax.swing.JRadioButton();
        Numeric = new javax.swing.JRadioButton();
        TrueFalse = new javax.swing.JRadioButton();
        Number = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Question = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MCQQuestion = new javax.swing.JTextArea();
        OptionsPanel = new javax.swing.JPanel();
        FirstOption = new javax.swing.JRadioButton();
        SecondOption = new javax.swing.JRadioButton();
        ThirdOption = new javax.swing.JRadioButton();
        FourthOption = new javax.swing.JRadioButton();
        label = new java.awt.Label();
        Next = new javax.swing.JButton();
        CreateQuiz = new javax.swing.JButton();
        Options = new java.awt.Label();
        OptionD = new javax.swing.JTextField();
        OptionA = new javax.swing.JTextField();
        OptionC = new javax.swing.JTextField();
        OptionB = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Question1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TrueFalseQuestion = new javax.swing.JTextArea();
        OptionsPanel1 = new javax.swing.JPanel();
        TrueOption = new javax.swing.JRadioButton();
        FalseOption = new javax.swing.JRadioButton();
        label1 = new java.awt.Label();
        Next1 = new javax.swing.JButton();
        CreateQuiz1 = new javax.swing.JButton();
        Options1 = new java.awt.Label();
        jPanel3 = new javax.swing.JPanel();
        Question2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        NumericQuestion = new javax.swing.JTextArea();
        OptionsPanel2 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        Next2 = new javax.swing.JButton();
        CreateQuiz2 = new javax.swing.JButton();
        NumericAnswer = new javax.swing.JTextField();
        label4 = new java.awt.Label();
        MaxMarks = new java.awt.Label();
        MaxScore = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        QuestionNo.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        QuestionNo.setText("Question No:");

        buttonGroup1.add(MultipleChoice);
        MultipleChoice.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        MultipleChoice.setText("Multiple Choice");
        MultipleChoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultipleChoiceActionPerformed(evt);
            }
        });

        buttonGroup1.add(Numeric);
        Numeric.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Numeric.setLabel("Numeric");
        Numeric.setName(""); // NOI18N
        Numeric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumericActionPerformed(evt);
            }
        });

        buttonGroup1.add(TrueFalse);
        TrueFalse.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TrueFalse.setLabel("True/False");
        TrueFalse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrueFalseActionPerformed(evt);
            }
        });

        Number.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N

        Question.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Question.setText("Question: ");

        MCQQuestion.setColumns(20);
        MCQQuestion.setRows(5);
        jScrollPane1.setViewportView(MCQQuestion);

        buttonGroup2.add(FirstOption);
        FirstOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        buttonGroup2.add(SecondOption);
        SecondOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        buttonGroup2.add(ThirdOption);
        ThirdOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ThirdOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThirdOptionActionPerformed(evt);
            }
        });

        buttonGroup2.add(FourthOption);
        FourthOption.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        label.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        label.setText("Click the correct option radio button to save the correct answer.");

        Next.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Next.setText("Next");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        CreateQuiz.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        CreateQuiz.setLabel("Create Quiz");
        CreateQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateQuizActionPerformed(evt);
            }
        });

        Options.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Options.setText("Options:");

        OptionD.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        OptionA.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        OptionC.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        OptionB.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N

        javax.swing.GroupLayout OptionsPanelLayout = new javax.swing.GroupLayout(OptionsPanel);
        OptionsPanel.setLayout(OptionsPanelLayout);
        OptionsPanelLayout.setHorizontalGroup(
            OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OptionsPanelLayout.createSequentialGroup()
                        .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(SecondOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(FirstOption, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(ThirdOption)
                            .addComponent(FourthOption, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(OptionB, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OptionA, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OptionC, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OptionD, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(OptionsPanelLayout.createSequentialGroup()
                        .addComponent(Next, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(CreateQuiz, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        OptionsPanelLayout.setVerticalGroup(
            OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanelLayout.createSequentialGroup()
                .addComponent(Options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptionA, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FirstOption))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptionB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SecondOption, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptionC, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThirdOption, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptionD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FourthOption, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Next)
                    .addComponent(CreateQuiz))
                .addGap(329, 329, 329))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Question)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(OptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 643, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Question))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        Question1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Question1.setText("Question: ");

        TrueFalseQuestion.setColumns(20);
        TrueFalseQuestion.setRows(5);
        jScrollPane2.setViewportView(TrueFalseQuestion);

        buttonGroup3.add(TrueOption);
        TrueOption.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        TrueOption.setText("True");

        buttonGroup3.add(FalseOption);
        FalseOption.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        FalseOption.setText("False");

        label1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        label1.setText("Click the correct option radio button to save the correct answer.");

        Next1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Next1.setText("Next");
        Next1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next1ActionPerformed(evt);
            }
        });

        CreateQuiz1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        CreateQuiz1.setLabel("Create Quiz");
        CreateQuiz1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateQuiz1ActionPerformed(evt);
            }
        });

        Options1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Options1.setText("Options:");

        javax.swing.GroupLayout OptionsPanel1Layout = new javax.swing.GroupLayout(OptionsPanel1);
        OptionsPanel1.setLayout(OptionsPanel1Layout);
        OptionsPanel1Layout.setHorizontalGroup(
            OptionsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OptionsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TrueOption)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Options1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FalseOption)
                    .addGroup(OptionsPanel1Layout.createSequentialGroup()
                        .addComponent(Next1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CreateQuiz1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        OptionsPanel1Layout.setVerticalGroup(
            OptionsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanel1Layout.createSequentialGroup()
                .addComponent(Options1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(TrueOption)
                .addGap(6, 6, 6)
                .addComponent(FalseOption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Next1)
                    .addComponent(CreateQuiz1))
                .addGap(0, 61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Question1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(OptionsPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 667, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Question1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OptionsPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Question2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Question2.setText("Question: ");

        NumericQuestion.setColumns(20);
        NumericQuestion.setRows(5);
        jScrollPane3.setViewportView(NumericQuestion);

        label2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        label2.setText("Enter the correct answer in the text field to save.");

        Next2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        Next2.setText("Next");
        Next2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next2ActionPerformed(evt);
            }
        });

        CreateQuiz2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        CreateQuiz2.setLabel("Create Quiz");
        CreateQuiz2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateQuiz2ActionPerformed(evt);
            }
        });

        NumericAnswer.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        label4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        label4.setText("Answer:");

        javax.swing.GroupLayout OptionsPanel2Layout = new javax.swing.GroupLayout(OptionsPanel2);
        OptionsPanel2.setLayout(OptionsPanel2Layout);
        OptionsPanel2Layout.setHorizontalGroup(
            OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanel2Layout.createSequentialGroup()
                .addGroup(OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(OptionsPanel2Layout.createSequentialGroup()
                        .addComponent(Next2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CreateQuiz2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OptionsPanel2Layout.createSequentialGroup()
                    .addGap(72, 72, 72)
                    .addComponent(NumericAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(217, Short.MAX_VALUE)))
            .addGroup(OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OptionsPanel2Layout.createSequentialGroup()
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 404, Short.MAX_VALUE)))
        );
        OptionsPanel2Layout.setVerticalGroup(
            OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsPanel2Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Next2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CreateQuiz2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 233, Short.MAX_VALUE))
            .addGroup(OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OptionsPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(NumericAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(314, Short.MAX_VALUE)))
            .addGroup(OptionsPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OptionsPanel2Layout.createSequentialGroup()
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 316, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(Question2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(OptionsPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 647, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(Question2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OptionsPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        MaxMarks.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        MaxMarks.setText("Maximum Marks:");

        MaxScore.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(QuestionNo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Number, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MultipleChoice)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Numeric)
                                    .addComponent(TrueFalse))
                                .addGap(73, 73, 73)
                                .addComponent(MaxMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MaxScore, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(49, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(84, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(QuestionNo)
                    .addComponent(Number, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(MultipleChoice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TrueFalse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Numeric))
                    .addComponent(MaxScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MaxMarks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(145, 145, 145)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(398, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(142, 142, 142)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        Numeric.getAccessibleContext().setAccessibleName("True/False");

        pack();
    }// </editor-fold>//GEN-END:initComponents
   public void MakeQuiz()
   {
       initsetQuestionNo(1);
   }
   
   private void CreateQuiz()
   {
      Quiz q1;
      q1 = new Quiz();
      q1.Title = Title;
      q1.Description = Description;
      q1.Questions = Quests;
      q1.Options = MCQOptions;
      q1.QuizMarks = TotalScore;
      q1.CorrectOptions = CorrectAnswers;
      q1.QuestionsMarks = QuestMarks; 
      try {
         FileOutputStream fileOut =
         new FileOutputStream("SavedSerializedData.ser");
         ObjectOutputStream out = new ObjectOutputStream(fileOut);
         out.writeObject(q1);
         out.close();
         fileOut.close();
      }catch(IOException g) {
         g.printStackTrace();
      }
   }
   
    
    private void initsetQuestionNo(int QuestNum)
    {
        QuestionNumber = QuestNum;
        Number.setText(Integer.toString(QuestNum));
        QuestNum++;
    }
    
    private void MultipleChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultipleChoiceActionPerformed

        if (MaxScore.getText().isEmpty())
        {
        JOptionPane.showMessageDialog(null,"Maximum marks field left empty. Fill it out before selecting the type of the question","Maximum marks field is empty",JOptionPane.ERROR_MESSAGE);                                                              
        buttonGroup1.clearSelection();
        }
        else if (!MaxScore.getText().matches("[0-9]+") || (Integer.parseInt(MaxScore.getText()) == 0))
        {
        JOptionPane.showMessageDialog(null,"Maximum marks must be a number greater than 0.","Invalid input",JOptionPane.ERROR_MESSAGE);                                                              
        buttonGroup1.clearSelection();
        jPanel1.setVisible(false);
        jPanel2.setVisible(false);
        jPanel3.setVisible(false);
        MaxScore.setText("");
        }
        else if(!MaxScore.getText().isEmpty() && (MaxScore.getText().matches("[0-9]+")) && (Integer.parseInt(MaxScore.getText()) != 0))
        {
        QuestionType = 1;
        showPanel();            
        }    
    }//GEN-LAST:event_MultipleChoiceActionPerformed

    private void NumericActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumericActionPerformed
   
        if (MaxScore.getText().isEmpty())
        {
        JOptionPane.showMessageDialog(null,"Maximum marks field left empty. Fill it out before selecting the type of the question","Maximum marks field is empty",JOptionPane.ERROR_MESSAGE);                                                              
        buttonGroup1.clearSelection();        
        }
        else if (!MaxScore.getText().matches("[0-9]+") || (Integer.parseInt(MaxScore.getText()) == 0))
        {
        JOptionPane.showMessageDialog(null,"Maximum marks must be a number greater than 0.","Invalid input",JOptionPane.ERROR_MESSAGE);                                                              
        buttonGroup1.clearSelection();
        jPanel1.setVisible(false);
        jPanel2.setVisible(false);
        jPanel3.setVisible(false);
        MaxScore.setText("");
        } 
        else if(!MaxScore.getText().isEmpty() && (MaxScore.getText().matches("[0-9]+")) && (Integer.parseInt(MaxScore.getText()) != 0))
        {
        QuestionType = 3;
        showPanel();            
        } 
    }//GEN-LAST:event_NumericActionPerformed

    private void TrueFalseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrueFalseActionPerformed

        if (MaxScore.getText().isEmpty())
        {
        JOptionPane.showMessageDialog(null,"Maximum marks field left empty. Fill it out before selecting the type of the question","Maximum marks field is empty",JOptionPane.ERROR_MESSAGE);                                                              
        buttonGroup1.clearSelection();               
        }
        else if ((!MaxScore.getText().isEmpty()) && (!MaxScore.getText().matches("[0-9]+")) || (Integer.parseInt(MaxScore.getText()) == 0))
        {
        JOptionPane.showMessageDialog(null,"Maximum marks must be a number greater than 0.","Invalid input",JOptionPane.ERROR_MESSAGE);                                                              
        buttonGroup1.clearSelection();        
        jPanel1.setVisible(false);
        jPanel2.setVisible(false);
        jPanel3.setVisible(false);
        MaxScore.setText("");
        }
        else if(!MaxScore.getText().isEmpty() && (MaxScore.getText().matches("[0-9]+")) && (Integer.parseInt(MaxScore.getText()) != 0))
        {
        QuestionType = 2;
        showPanel();            
        }    
    }//GEN-LAST:event_TrueFalseActionPerformed

    private void ThirdOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThirdOptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ThirdOptionActionPerformed

    private void showPanel()
    {
        if((QuestionType==1 || QuestionType==2 || QuestionType==3) && !MaxScore.getText().matches("[0-9]+") || (Integer.parseInt(MaxScore.getText()) == 0))
        {
        JOptionPane.showMessageDialog(null,"Maximum Marks must be a number greater than 0.","Invalid input of Maximum marks",JOptionPane.ERROR_MESSAGE);                         
        }
        else if(QuestionType==1 && (MaxScore.getText().matches("[0-9]+")) && (Integer.parseInt(MaxScore.getText()) != 0))
        {
            jPanel1.setVisible(true);
            jPanel2.setVisible(false);
            jPanel3.setVisible(false);
        }
        else if(QuestionType==2 && (MaxScore.getText().matches("[0-9]+")) && (Integer.parseInt(MaxScore.getText()) != 0))        
        {
            jPanel2.setVisible(true);
            jPanel1.setVisible(false);
            jPanel3.setVisible(false);
        }
        else if(QuestionType==3 && (!MaxScore.getText().isEmpty()) && (MaxScore.getText().matches("[0-9]+")) && (Integer.parseInt(MaxScore.getText()) != 0))        
        {
            jPanel3.setVisible(true);
            jPanel1.setVisible(false);
            jPanel2.setVisible(false);
        }
    }
    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        if(QuestionType==1)
        {           
            if(MCQQuestion.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please type out the question before proceeding","Question field empty",JOptionPane.ERROR_MESSAGE);                                                   
            }
            else if(!MCQQuestion.getText().isEmpty())
            {
                if(OptionA.getText().isEmpty() || OptionB.getText().isEmpty() || OptionC.getText().isEmpty() || OptionD.getText().isEmpty())
                {
                JOptionPane.showMessageDialog(null,"One or more options are left empty","Options empty",JOptionPane.ERROR_MESSAGE);                                                   
                }
                else if((!OptionA.getText().isEmpty() && !OptionB.getText().isEmpty() && !OptionC.getText().isEmpty() && !OptionD.getText().isEmpty()) && (!FirstOption.isSelected()&& !SecondOption.isSelected() && !ThirdOption.isSelected()&& !FourthOption.isSelected()))
                {
                JOptionPane.showMessageDialog(null,"Please select a correct option to continue","Correct option not selected",JOptionPane.ERROR_MESSAGE);                                                                                 
                }
                else if((!OptionA.getText().isEmpty() && !OptionB.getText().isEmpty() && !OptionC.getText().isEmpty() && !OptionD.getText().isEmpty()) && (FirstOption.isSelected() || SecondOption.isSelected() || ThirdOption.isSelected() || FourthOption.isSelected()) && (!MaxScore.getText().matches("[0-9]+")) || (Integer.parseInt(MaxScore.getText()) == 0))
                {
                JOptionPane.showMessageDialog(null,"Maximum Marks must be a number from 1 to 10","Invalid input of Maximum marks",JOptionPane.ERROR_MESSAGE);                                                                                       
                }
                else if((!OptionA.getText().isEmpty() && !OptionB.getText().isEmpty() && !OptionC.getText().isEmpty() && !OptionD.getText().isEmpty()) && (FirstOption.isSelected()|| SecondOption.isSelected() || ThirdOption.isSelected() || FourthOption.isSelected()) && (MaxScore.getText().isEmpty()))
                {
                JOptionPane.showMessageDialog(null,"Maximum Marks field cannot be left empty","Maximum marks field left empty",JOptionPane.ERROR_MESSAGE);                                                                                       
                }
                else
                {
                Quests.add(MCQQuestion.getText());
                MCQOptions.add(FirstOption.getText());
                MCQOptions.add(SecondOption.getText());
                MCQOptions.add(ThirdOption.getText());
                MCQOptions.add(FourthOption.getText());
                QuestMarks.add(MaxScore.getText());

                if(FirstOption.isSelected())
                {
                    CorrectAnswers.add(OptionA.getText());
                }
                else if(SecondOption.isSelected())
                {
                    CorrectAnswers.add(OptionB.getText());                    
                }
                else if(ThirdOption.isSelected())
                {
                    CorrectAnswers.add(OptionC.getText());                    
                }
                else if(FourthOption.isSelected())
                {
                    CorrectAnswers.add(OptionD.getText());                    
                }
                MaximumScore = Integer.parseInt(MaxScore.getText());
                TotalScore = TotalScore + MaximumScore;                
                JOptionPane.showMessageDialog(null,"Question "+QuestionNumber+" is saved. Marks of this question are: "+MaximumScore+ ".\nProceeding!","Proceed!",JOptionPane.INFORMATION_MESSAGE);                                                                                       
                try
                {
                File file = new File("Quizzes.txt");
                // if file doesnt exists, then create it 
                if (!file.exists( ))
                {
                file.createNewFile( );
                }
                FileWriter fw = new FileWriter( file.getAbsoluteFile( ) , true);
                BufferedWriter bw = new BufferedWriter( fw );
                bw.write(Title+"--------");
                bw.write(Description+"--------");
                bw.write(QuestionType+"--------");
                bw.write(MaximumScore+"--------");
                bw.write(QuestionNumber+"--------");
                bw.write(MCQQuestion.getText()+"--------");                
                bw.write(OptionA.getText()+"--------");
                bw.write(OptionB.getText()+"--------");
                bw.write(OptionC.getText()+"--------");
                bw.write(OptionD.getText()+"--------");
                if(FirstOption.isSelected())                
                {
                bw.write(OptionA.getText());                    
                }
                else if(SecondOption.isSelected())
                {
                bw.write(OptionB.getText());                    
                }
                else if(ThirdOption.isSelected())
                {
                bw.write(OptionC.getText());                    
                }
                else if(FourthOption.isSelected())
                {
                bw.write(OptionD.getText());                    
                }
                bw.newLine();
                bw.close( );
                //System.out.println("Done writing to " + fileName); //For testing 
                }
                catch( IOException e )
                {
                System.out.println("Error: " + e);
                e.printStackTrace( );
                systemExit();
                }
                
                jPanel1.setVisible(false);
                QuestionType=100; //Random value
                MaxScore.setText("");
                buttonGroup1.clearSelection();
                buttonGroup2.clearSelection();
                MCQQuestion.setText("");
                OptionA.setText("");
                OptionB.setText("");
                OptionC.setText("");
                OptionD.setText("");

                initsetQuestionNo(++QuestionNumber);
                }
            }
        }
    }//GEN-LAST:event_NextActionPerformed

    private void Next1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next1ActionPerformed
        if(QuestionType==2)
        {
            if(TrueFalseQuestion.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please type out the question before proceeding","Question field empty",JOptionPane.ERROR_MESSAGE);                                                   
            }
            else if(!TrueFalseQuestion.getText().isEmpty())
            {
                if((!MaxScore.getText().matches("[0-9]+")) || (Integer.parseInt(MaxScore.getText()) == 0))
                {
                JOptionPane.showMessageDialog(null,"Maximum marks must be a number greater than 0","Invalid Maximum marks",JOptionPane.ERROR_MESSAGE);                                                                       
                }
                else if(!TrueOption.isSelected()&& !FalseOption.isSelected())
                {
                JOptionPane.showMessageDialog(null,"Please select a correct option to continue","Correct option not selected",JOptionPane.ERROR_MESSAGE);                                                                       
                }
                else
                {
                Quests.add(TrueFalseQuestion.getText());
                QuestMarks.add(MaxScore.getText());
                if(TrueOption.isSelected())
                {
                CorrectAnswers.add("True");                    
                }
                else if(FalseOption.isSelected())
                {
                CorrectAnswers.add("False");                                        
                }
                MaximumScore = Integer.parseInt(MaxScore.getText());
                TotalScore = TotalScore + MaximumScore;                
                JOptionPane.showMessageDialog(null,"Question "+QuestionNumber+" is saved. Marks of this question are: "+MaximumScore+".\nProceeding!","Proceed!",JOptionPane.INFORMATION_MESSAGE);                                                                       
                try
                {
                File file = new File("Quizzes.txt");
                // if file doesnt exists, then create it 
                if (!file.exists( ))
                {
                file.createNewFile( );
                }
                FileWriter fw = new FileWriter( file.getAbsoluteFile( ),true );
                BufferedWriter bw = new BufferedWriter( fw );
                bw.write(Title+"--------");
                bw.write(Description+"--------");
                bw.write(QuestionType+"--------");
                bw.write(MaximumScore+"--------");
                bw.write(QuestionNumber+"--------");
                bw.write(TrueFalseQuestion.getText()+"--------");
                bw.write("True--------");
                bw.write("False--------");               
                if(TrueOption.isSelected())                
                {
                bw.write("True");                    
                }
                else if(FalseOption.isSelected())
                {
                bw.write("False");                                        
                }
                bw.newLine();
                bw.close( );
                }
                catch( IOException e )
                {
                System.out.println("Error: " + e);
                e.printStackTrace( );
                systemExit();
                }                
                
                jPanel2.setVisible(false);
                QuestionType=100; //Random value
                MaxScore.setText("");
                buttonGroup1.clearSelection();
                buttonGroup3.clearSelection();
                TrueFalseQuestion.setText("");
                
                initsetQuestionNo(++QuestionNumber);
                }
            }
        }
    }//GEN-LAST:event_Next1ActionPerformed

    private void Next2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next2ActionPerformed
             
        if(QuestionType==3)
        {
            if(NumericQuestion.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please type out the question before proceeding","Question field empty",JOptionPane.ERROR_MESSAGE);                                                   
            }
            else if(NumericAnswer.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please provide the correct answer before proceeding.","Corrcect answer not provided.",JOptionPane.ERROR_MESSAGE);                                                                   
            }
            else if(!NumericAnswer.getText().isEmpty())
            {
                if((!MaxScore.getText().matches("[0-9]+")) || (Integer.parseInt(MaxScore.getText()) == 0))
                {
                JOptionPane.showMessageDialog(null,"Maximum marks must be a number greater than 0","Invalid Maximum marks",JOptionPane.ERROR_MESSAGE);                                                                       
                }    
                else if(!NumericAnswer.getText().matches("[0-9]+"))
                {
                JOptionPane.showMessageDialog(null,"Please enter a number in the answer field","Invalid input",JOptionPane.ERROR_MESSAGE);                                                                       
                }
                else
                {
                   
                    Quests.add(NumericQuestion.getText());
                    CorrectAnswers.add(NumericAnswer.getText());
                MaximumScore = Integer.parseInt(MaxScore.getText());
                TotalScore = TotalScore + MaximumScore;                
                JOptionPane.showMessageDialog(null,"Question "+QuestionNumber+" is saved. Marks of this question are: "+MaximumScore+ ".\nProceeding!","Proceed!",JOptionPane.INFORMATION_MESSAGE);                                                                       
                try
                {
                File file = new File("Quizzes.txt");
                // if file doesnt exists, then create it 
                if (!file.exists( ))
                {
                file.createNewFile( );
                }
                FileWriter fw = new FileWriter( file.getAbsoluteFile( ) ,true);
                BufferedWriter bw = new BufferedWriter( fw );
                bw.write(Title+"--------");
                bw.write(Description+"--------");
                bw.write(QuestionType+"--------");
                bw.write(MaximumScore+"--------");
                bw.write(QuestionNumber+"--------");
                bw.write(NumericQuestion.getText()+"--------");
                bw.write(NumericAnswer.getText());
                bw.newLine();
                bw.close( );
                //System.out.println("Done writing to " + fileName); //For testing 
                }
                catch( IOException e )
                {
                System.out.println("Error: " + e);
                e.printStackTrace( );
                systemExit();
                }                    
                
                jPanel3.setVisible(false);
                QuestionType=100; //Random value
                buttonGroup1.clearSelection();   

                MaxScore.setText("");
                NumericQuestion.setText("");
                NumericAnswer.setText("");
                initsetQuestionNo(++QuestionNumber);                
                }
            }
        }
    }//GEN-LAST:event_Next2ActionPerformed

    private void CreateQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateQuizActionPerformed
         if(QuestionType==1)
        {
            if(MCQQuestion.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please type out the question before proceeding","Question field empty",JOptionPane.ERROR_MESSAGE);                                                   
            }
            else if(!MCQQuestion.getText().isEmpty())
            {
                if(OptionA.getText().isEmpty() || OptionB.getText().isEmpty() || OptionC.getText().isEmpty() || OptionD.getText().isEmpty())
                {
                JOptionPane.showMessageDialog(null,"One or more options are left empty","Options empty",JOptionPane.ERROR_MESSAGE);                                                   
                }
                else if((!OptionA.getText().isEmpty() && !OptionB.getText().isEmpty() && !OptionC.getText().isEmpty() && !OptionD.getText().isEmpty()) && (!FirstOption.isSelected()&& !SecondOption.isSelected() && !ThirdOption.isSelected()&& !FourthOption.isSelected()))
                {
                JOptionPane.showMessageDialog(null,"Please select a correct option to continue","Correct option not selected",JOptionPane.ERROR_MESSAGE);                                                                                 
                }
                else if((!OptionA.getText().isEmpty() && !OptionB.getText().isEmpty() && !OptionC.getText().isEmpty() && !OptionD.getText().isEmpty()) && (FirstOption.isSelected() || SecondOption.isSelected() || ThirdOption.isSelected() || FourthOption.isSelected()) && (!MaxScore.getText().matches("[0-9]+")))
                {
                JOptionPane.showMessageDialog(null,"Maximum Marks must be a number from 1 to 10","Invalid input of Maximum marks",JOptionPane.ERROR_MESSAGE);                                                                                       
                }
                else if((!OptionA.getText().isEmpty() && !OptionB.getText().isEmpty() && !OptionC.getText().isEmpty() && !OptionD.getText().isEmpty()) && (FirstOption.isSelected()|| SecondOption.isSelected() || ThirdOption.isSelected() || FourthOption.isSelected()) && (MaxScore.getText().isEmpty()))
                {
                JOptionPane.showMessageDialog(null,"Maximum Marks field cannot be left empty","Maximum marks field left empty",JOptionPane.ERROR_MESSAGE);                                                                                       
                }
                else
                {
                Quests.add(MCQQuestion.getText());
                MCQOptions.add(FirstOption.getText());
                MCQOptions.add(SecondOption.getText());
                MCQOptions.add(ThirdOption.getText());
                MCQOptions.add(FourthOption.getText());
                QuestMarks.add(MaxScore.getText());

                if(FirstOption.isSelected())
                {
                    CorrectAnswers.add(OptionA.getText());
                }
                else if(SecondOption.isSelected())
                {
                    CorrectAnswers.add(OptionB.getText());                    
                }
                else if(ThirdOption.isSelected())
                {
                    CorrectAnswers.add(OptionC.getText());                    
                }
                else if(FourthOption.isSelected())
                {
                    CorrectAnswers.add(OptionD.getText());                    
                }
                MaximumScore = Integer.parseInt(MaxScore.getText());
                TotalScore = TotalScore + MaximumScore;
                JOptionPane.showMessageDialog(null,"Question "+QuestionNumber+" is saved. Marks of this question are: "+MaximumScore+ "\nQuiz created successfully.\nQuiz Details: \nTotal questions in the quiz = "+QuestionNumber+ "\nTotal Marks of the quiz = "+TotalScore,"Quiz created successfully",JOptionPane.INFORMATION_MESSAGE);                                                                       
                
                try
                {
                File file = new File("Quizzes.txt");
                // if file doesnt exists, then create it 
                if (!file.exists( ))
                {
                file.createNewFile( );
                }
                FileWriter fw = new FileWriter( file.getAbsoluteFile( ) ,true);
                BufferedWriter bw = new BufferedWriter( fw );
                bw.write(Title+"--------");
                bw.write(Description+"--------");
                bw.write(QuestionType+"--------");
                bw.write(MaximumScore+"--------");
                bw.write(QuestionNumber+"--------");
                bw.write(MCQQuestion.getText()+"--------");
                bw.write(OptionA.getText()+"--------");
                bw.write(OptionB.getText()+"--------");
                bw.write(OptionC.getText()+"--------");
                bw.write(OptionD.getText()+"--------");
                if(FirstOption.isSelected())                
                {
                bw.write(OptionA.getText()+"--------");                    
                }
                else if(SecondOption.isSelected())
                {
                bw.write(OptionB.getText()+"--------");                    
                }
                else if(ThirdOption.isSelected())
                {
                bw.write(OptionC.getText()+"--------");                    
                }
                else if(FourthOption.isSelected())
                {
                bw.write(OptionD.getText()+"--------");                    
                }
                bw.write(Integer.toString(TotalScore));
                bw.newLine();
                bw.close( );
                }
                catch( IOException e )
                {
                System.out.println("Error: " + e);
                e.printStackTrace( );
                systemExit();
                }                
                CreateQuiz();
                String[] options = {"Logout", "Create another quiz","Exit program"};
                int n = JOptionPane.showOptionDialog(null,"Do you want to logout or create another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                    if(options[n].contains("Logout"))
                    {
                    this.dispose();    
                    Login newUser = new Login();
                    newUser.setVisible(true);
                    }
                    else if(options[n].contains("Exit program"))
                    {
                    System.exit(0);        
                    }
                    else if(options[n].contains("Create another quiz"))
                    {
                    this.dispose();
                    TitleAndDescription NextQuizCreation = new TitleAndDescription();
                    NextQuizCreation.setVisible(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_CreateQuizActionPerformed

    private void CreateQuiz1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateQuiz1ActionPerformed
        if(QuestionType==2)
        {
            if(TrueFalseQuestion.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please type out the question before proceeding","Question field empty",JOptionPane.ERROR_MESSAGE);                                                   
            }
            else if(!TrueFalseQuestion.getText().isEmpty())
            {
                if((!MaxScore.getText().matches("[0-9]+")) || (Integer.parseInt(MaxScore.getText()) == 0))
                {
                JOptionPane.showMessageDialog(null,"Maximum marks must be a number greater than 0","Invalid Maximum marks",JOptionPane.ERROR_MESSAGE);                                                                       
                }
                else if(!TrueOption.isSelected()&& !FalseOption.isSelected())
                {
                JOptionPane.showMessageDialog(null,"Please select a correct option to continue","Correct option not selected",JOptionPane.ERROR_MESSAGE);                                                                       
                }
                else
                {
                Quests.add(TrueFalseQuestion.getText());
                QuestMarks.add(MaxScore.getText());
                if(TrueOption.isSelected())
                {
                CorrectAnswers.add("True");                    
                }
                else if(FalseOption.isSelected())
                {
                CorrectAnswers.add("False");                                        
                }    
                MaximumScore = Integer.parseInt(MaxScore.getText());
                TotalScore = TotalScore + MaximumScore;                
                JOptionPane.showMessageDialog(null,"Question "+QuestionNumber+" is saved. Marks of this question are: "+MaximumScore+ "\nQuiz created successfully.\nQuiz Details: \nTotal questions in the quiz = "+QuestionNumber+ "\nTotal Marks of the quiz = "+TotalScore,"Quiz created successfully",JOptionPane.INFORMATION_MESSAGE);                                                                       
                try
                {
                File file = new File("Quizzes.txt");
                // if file doesnt exists, then create it 
                if (!file.exists( ))
                {
                file.createNewFile( );
                }
                FileWriter fw = new FileWriter( file.getAbsoluteFile( ),true );
                BufferedWriter bw = new BufferedWriter( fw );
                bw.write(Title+"--------");
                bw.write(Description+"--------");
                bw.write(QuestionType+ "--------");
                bw.write(MaximumScore+"--------");
                bw.write(QuestionNumber+"--------");
                bw.write(TrueFalseQuestion.getText()+"--------");
                bw.write(TrueOption.getText()+"--------");
                bw.write(FalseOption.getText()+"--------");               
                if(TrueOption.isSelected())                
                {
                bw.write("True--------");                    
                }
                else if(FalseOption.isSelected())
                {
                bw.write("False--------");                                        
                }
                bw.write(Integer.toString(TotalScore));
                bw.newLine();
                bw.close( );
                //System.out.println("Done writing to " + fileName); //For testing 
                }
                catch( IOException e )
                {
                System.out.println("Error: " + e);
                e.printStackTrace( );
                systemExit();
                }                     
                CreateQuiz();
                String[] options = {"Logout", "Create another quiz","Exit program"};
                int n = JOptionPane.showOptionDialog(null,"Do you want to logout or create another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                    if(options[n].contains("Logout"))
                    {
                    this.dispose();                            
                    Login newUser = new Login();
                    newUser.setVisible(true);
                    }
                    else if(options[n].contains("Exit program"))
                    {
                    System.exit(0);        
                    }
                    else if(options[n].contains("Create another quiz"))
                    {
                    this.dispose();
                    TitleAndDescription NextQuizCreation = new TitleAndDescription();
                    NextQuizCreation.setVisible(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_CreateQuiz1ActionPerformed
    
    
    private void CreateQuiz2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateQuiz2ActionPerformed
             
        if(QuestionType==3)
        {
            if(NumericQuestion.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please type out the question before proceeding","Question field empty",JOptionPane.ERROR_MESSAGE);                                                   
            }
            else if(NumericAnswer.getText().isEmpty())
            {
            JOptionPane.showMessageDialog(null,"Please provide the correct answer before proceeding.","Corrcect answer not provided.",JOptionPane.ERROR_MESSAGE);                                                                   
            }
            else if(!NumericAnswer.getText().isEmpty())
            {
                if((!MaxScore.getText().matches("[0-9]+")) || (Integer.parseInt(MaxScore.getText()) == 0))
                {
                JOptionPane.showMessageDialog(null,"Maximum marks must be a number greater than 0","Invalid Maximum marks",JOptionPane.ERROR_MESSAGE);                                                                       
                }    
                else if(!NumericAnswer.getText().matches("[0-9]+"))
                {
                JOptionPane.showMessageDialog(null,"Please enter a number in the answer field","Invalid input",JOptionPane.ERROR_MESSAGE);                                                                       
                }
                else
                {
                Quests.add(NumericQuestion.getText());
                CorrectAnswers.add(NumericAnswer.getText());
                MaximumScore = Integer.parseInt(MaxScore.getText());
                TotalScore = TotalScore + MaximumScore;
                JOptionPane.showMessageDialog(null,"Question "+QuestionNumber+" is saved. Marks of this question are: "+MaximumScore+ "\nQuiz created successfully.\nQuiz Details: \nTotal questions in the quiz = "+QuestionNumber+ "\nTotal Marks of the quiz = "+TotalScore,"Quiz created successfully",JOptionPane.INFORMATION_MESSAGE);                                                                       
                try
                {
                File file = new File("Quizzes.txt");
                // if file doesnt exists, then create it 
                if (!file.exists( ))
                {
                file.createNewFile( );
                }
                FileWriter fw = new FileWriter( file.getAbsoluteFile( ) ,true);
                BufferedWriter bw = new BufferedWriter( fw );
                bw.write(Title+"--------");
                bw.write(Description+"--------");
                bw.write(QuestionType+"--------");
                bw.write(MaximumScore+"--------");
                bw.write(QuestionNumber+"--------");
                bw.write(NumericQuestion.getText()+"--------");
                bw.write(NumericAnswer.getText()+"--------");
                bw.write(Integer.toString(TotalScore));
                bw.newLine();
                bw.close( );
                //System.out.println("Done writing to " + fileName); //For testing 
                }
                catch( IOException e )
                {
                System.out.println("Error: " + e);
                e.printStackTrace( );
                systemExit();
                }                
                CreateQuiz();
                String[] options = {"Logout", "Create another quiz","Exit program"};
                int n = JOptionPane.showOptionDialog(null,"Do you want to logout or create another quiz?","Choose an option",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[0]);
                    if(options[n].contains("Logout"))
                    {
                    this.dispose();                            
                    Login newUser = new Login();
                    newUser.setVisible(true);
                    }
                    else if(options[n].contains("Exit program"))
                    {
                    System.exit(0);        
                    }
                    else if(options[n].contains("Create another quiz"))
                    {
                    this.dispose();
                    TitleAndDescription NextQuizCreation = new TitleAndDescription();
                    NextQuizCreation.setVisible(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_CreateQuiz2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Instructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Instructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Instructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Instructor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Instructor(Title, Description).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateQuiz;
    private javax.swing.JButton CreateQuiz1;
    private javax.swing.JButton CreateQuiz2;
    private javax.swing.JRadioButton FalseOption;
    private javax.swing.JRadioButton FirstOption;
    private javax.swing.JRadioButton FourthOption;
    private javax.swing.JTextArea MCQQuestion;
    private java.awt.Label MaxMarks;
    private javax.swing.JTextField MaxScore;
    private javax.swing.JRadioButton MultipleChoice;
    private javax.swing.JButton Next;
    private javax.swing.JButton Next1;
    private javax.swing.JButton Next2;
    private javax.swing.JLabel Number;
    private javax.swing.JRadioButton Numeric;
    private javax.swing.JTextField NumericAnswer;
    private javax.swing.JTextArea NumericQuestion;
    private javax.swing.JTextField OptionA;
    private javax.swing.JTextField OptionB;
    private javax.swing.JTextField OptionC;
    private javax.swing.JTextField OptionD;
    private java.awt.Label Options;
    private java.awt.Label Options1;
    private javax.swing.JPanel OptionsPanel;
    private javax.swing.JPanel OptionsPanel1;
    private javax.swing.JPanel OptionsPanel2;
    private javax.swing.JLabel Question;
    private javax.swing.JLabel Question1;
    private javax.swing.JLabel Question2;
    private javax.swing.JLabel QuestionNo;
    private javax.swing.JRadioButton SecondOption;
    private javax.swing.JRadioButton ThirdOption;
    private javax.swing.JRadioButton TrueFalse;
    private javax.swing.JTextArea TrueFalseQuestion;
    private javax.swing.JRadioButton TrueOption;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Label label;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label4;
    // End of variables declaration//GEN-END:variables

    private void systemExit() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
